integrandpc = function(a, up, foi){
#Find which interval a belongs to
wh = findInterval(a, sort(c(0,up)))
#Calculate duration of each interval
dur = diff(sort(c(0,up)))
#Evaluate integrand
inte = ifelse(wh == 1, foi[1]*a,
sum(foi[1:(wh-1)]*dur[1:(wh-1)])+
foi[wh]*(a-up[wh-1]))
return(inte)
}
llik.pc = function(par, age, num, denom, up) {
ll = 0
for (i in 1:length(age)) {
p = 1 - exp(-integrandpc(a=age[i], up = up,
foi = exp(par)))
ll = ll + dbinom(num[i], denom[i], p, log = T)
}
return(-ll)
}
cate <- c(1,20,40,60,80)
para = rep(0.1, length(x))
cate <- c(1,20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
round(exp(est$par), 4)
round(exp(est$par), 5)
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,x)
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[7]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
par(new=T)
p = rep(0, 28)
for (i in 1:28) {
p[i] = 1 - exp(-integrandpc(a=i, up = cate,
foi = exp(est$par)))
}
plot(p~c(1:28), ylim=c(0,1), type="l", col="red",
axes=FALSE, xlab=NA, ylab=NA)
axis(side = 4)
mtext(side = 4, line = 4, "Prevalence")
legend("right", legend=c("FoI", "Prevalence"),
lty=c(1,1), col=c("black", "red"))
integrandpc = function(a, up, foi){
#Find which interval a belongs to
wh = findInterval(a, sort(c(0,up)))
#Calculate duration of each interval
dur = diff(up)
#Evaluate integrand
inte = ifelse(wh == 1, foi[1]*a,
sum(foi[1:(wh-1)]*dur[1:(wh-1)])+
foi[wh]*(a-up[wh-1]))
return(inte)
}
llik.pc = function(par, age, num, denom, up) {
ll = 0
for (i in 1:length(age)) {
p = 1 - exp(-integrandpc(a=age[i], up = up,
foi = exp(par)))
ll = ll + dbinom(num[i], denom[i], p, log = T)
}
return(-ll)
}
cate <- c(1,20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
round(exp(est$par), 4)
up = cate
dur = diff(sort(c(0,up)))
dur
dur = diff(cate)
dur
wh = findInterval(a, sort(c(0,up)))
wh
wh = findInterval(a, sort(c(0,cate)))
wh
integrandpc = function(a, up, foi){
#Find which interval a belongs to
wh = findInterval(a, sort(c(0,up)))
#Calculate duration of each interval
dur = diff(up)
#Evaluate integrand
inte = ifelse(wh == 1, foi[1]*a,
sum(foi[1:(wh-1)]*dur[1:(wh-1)])+
foi[wh]*(a-up[wh-1]))
return(inte)
}
llik.pc = function(par, age, num, denom, up) {
ll = 0
for (i in 1:length(age)) {
p = 1 - exp(-integrandpc(a=age[i], up = up,
foi = exp(par)))
ll = ll + dbinom(num[i], denom[i], p, log = T)
}
return(-ll)
}
cate <- c(1,20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
round(exp(est$par), 4)
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[7]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
par(new=T)
p = rep(0, 28)
for (i in 1:28) {
p[i] = 1 - exp(-integrandpc(a=i, up = cate,
foi = exp(est$par)))
}
plot(p~c(1:28), ylim=c(0,1), type="l", col="red",
axes=FALSE, xlab=NA, ylab=NA)
#Add right axis and legend
axis(side = 4)
mtext(side = 4, line = 4, "Prevalence")
legend("right", legend=c("FoI", "Prevalence"),
lty=c(1,1), col=c("black", "red"))
par(new=T)
p = rep(0, 28)
for (i in 1:28) {
p[i] = 1 - exp(-integrandpc(a=i, up = cate,
foi = exp(est$par)))
}
plot(p~c(1:28), ylim=c(0,1), type="l", col="red",
axes=FALSE, xlab=NA, ylab=NA)
par(new=T)
p = rep(0, 28)
for (i in 1:28) {
p[i] = 1 - exp(-integrandpc(a=i, up = cate,
foi = exp(est$par)))
}
plot(p~c(1:28), ylim=c(0,1), type="l", col="red",
axes=FALSE, xlab=NA, ylab=NA)
integrandpc = function(a, up, foi){
#Find which interval a belongs to
wh = findInterval(a, sort(c(0,up)))
#Calculate duration of each interval
dur = diff(up)
#Evaluate integrand
inte = ifelse(wh == 1, foi[1]*a,
sum(foi[1:(wh-1)]*dur[1:(wh-1)])+
foi[wh]*(a-up[wh-1]))
return(inte)
}
llik.pc = function(par, age, num, denom, up) {
ll = 0
for (i in 1:length(age)) {
p = 1 - exp(-integrandpc(a=age[i], up = up,
foi = exp(par)))
ll = ll + dbinom(num[i], denom[i], p, log = T)
}
return(-ll)
}
cate <- c(1,20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
round(exp(est$par), 4)
#Make space for left and right axes
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[7]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
#Superimpose predicted curve
par(new=T)
p = rep(0, 28)
for (i in 1:28) {
p[i] = 1 - exp(-integrandpc(a=i, up = cate,
foi = exp(est$par)))
}
plot(p~c(1:28), ylim=c(0,1), type="l", col="red",
axes=FALSE, xlab=NA, ylab=NA)
sort(c(0,up))
integrandpc = function(a, up, foi){
#Find which interval a belongs to
wh = findInterval(a, up)
#Calculate duration of each interval
dur = diff(up)
#Evaluate integrand
inte = ifelse(wh == 1, foi[1]*a,
sum(foi[1:(wh-1)]*dur[1:(wh-1)])+
foi[wh]*(a-up[wh-1]))
return(inte)
}
llik.pc = function(par, age, num, denom, up) {
ll = 0
for (i in 1:length(age)) {
p = 1 - exp(-integrandpc(a=age[i], up = up,
foi = exp(par)))
ll = ll + dbinom(num[i], denom[i], p, log = T)
}
return(-ll)
}
cate <- c(1,20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
round(exp(est$par), 4)
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[7]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
par(new=T)
p = rep(0, 28)
for (i in 1:28) {
p[i] = 1 - exp(-integrandpc(a=i, up = cate,
foi = exp(est$par)))
}
plot(p~c(1:28), ylim=c(0,1), type="l", col="red",
axes=FALSE, xlab=NA, ylab=NA)
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[5]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
#Superimpose predicted curve
par(new=T)
p = rep(0, 28)
for (i in 1:28) {
p[i] = 1 - exp(-integrandpc(a=i, up = cate,
foi = exp(est$par)))
}
plot(p~c(1:28), ylim=c(0,1), type="l", col="red",
axes=FALSE, xlab=NA, ylab=NA)
integrandpc = function(a, up, foi){
#Find which interval a belongs to
wh = findInterval(a, up)
#Calculate duration of each interval
dur = diff(up)
#Evaluate integrand
inte = ifelse(wh == 1, foi[1]*a,
sum(foi[1:(wh-1)]*dur[1:(wh-1)])+
foi[wh]*(a-up[wh-1]))
return(inte)
}
llik.pc = function(par, age, num, denom, up) {
ll = 0
for (i in 1:length(age)) {
p = 1 - exp(-integrandpc(a=age[i], up = up,
foi = exp(par)))
ll = ll + dbinom(num[i], denom[i], p, log = T)
}
return(-ll)
}
cate <- c(0, 1, 20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
round(exp(est$par), 4)
#Make space for left and right axes
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[5]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
#Superimpose predicted curve
par(new=T)
p = rep(0, 28)
for (i in 1:28) {
p[i] = 1 - exp(-integrandpc(a=i, up = cate,
foi = exp(est$par)))
}
plot(p~c(1:28), ylim=c(0,1), type="l", col="red",
axes=FALSE, xlab=NA, ylab=NA)
integrandpc = function(a, up, foi){
#Find which interval a belongs to
wh = findInterval(a, up)
#Calculate duration of each interval
dur = diff(up)
#Evaluate integrand
inte = ifelse(wh == 1, foi[1]*a,
sum(foi[1:(wh-1)]*dur[1:(wh-1)])+
foi[wh]*(a-up[wh-1]))
return(inte)
}
llik.pc = function(par, age, num, denom, up) {
ll = 0
for (i in 1:length(age)) {
p = 1 - exp(-integrandpc(a=age[i], up = up,
foi = exp(par)))
ll = ll + dbinom(num[i], denom[i], p, log = T)
}
return(-ll)
}
cate <- c(1,20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
round(exp(est$par), 4)
#Make space for left and right axes
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[5]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
#Superimpose predicted curve
par(new=T)
p = rep(0, 28)
for (i in 1:28) {
p[i] = 1 - exp(-integrandpc(a=i, up = cate,
foi = exp(est$par)))
}
plot(p~c(1:28), ylim=c(0,1), type="l", col="red",
axes=FALSE, xlab=NA, ylab=NA)
round(exp(est$par), 4)
para
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[4]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[3]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[4]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
par(new=T)
p = rep(0, 28)
for (i in 1:28) {
p[i] = 1 - exp(-integrandpc(a=i, up = cate,
foi = exp(est$par)))
}
plot(p~c(1:28), ylim=c(0,1), type="l", col="red",
axes=FALSE, xlab=NA, ylab=NA)
round(exp(est$par), 4)
integrandpc = function(a, up, foi){
#Find which interval a belongs to
wh = findInterval(a, up)
#Calculate duration of each interval
dur = diff(up)
#Evaluate integrand
inte = ifelse(wh == 1, foi[1]*a,
sum(foi[1:(wh-1)]*dur[1:(wh-1)])+
foi[wh]*(a-up[wh-1]))
return(inte)
}
llik.pc = function(par, age, num, denom, up) {
ll = 0
for (i in 1:length(age)) {
p = 1 - exp(-integrandpc(a=age[i], up = up,
foi = exp(par)))
ll = ll + dbinom(num[i], denom[i], p, log = T)
}
return(-ll)
}
cate <- c(20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
integrandpc = function(a, up, foi){
#Find which interval a belongs to
wh = findInterval(a, up)
#Calculate duration of each interval
dur = diff(up)
#Evaluate integrand
inte = ifelse(wh == 1, foi[1]*a,
sum(foi[1:(wh-1)]*dur[1:(wh-1)])+
foi[wh]*(a-up[wh-1]))
return(inte)
}
llik.pc = function(par, age, num, denom, up) {
ll = 0
for (i in 1:length(age)) {
p = 1 - exp(-integrandpc(a=age[i], up = up,
foi = exp(par)))
ll = ll + dbinom(num[i], denom[i], p, log = T)
}
return(-ll)
}
cate <- c(1,20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
round(exp(est$par), 4)
integrandpc = function(a, up, foi){
#Find which interval a belongs to
wh = findInterval(a, up)
#Calculate duration of each interval
dur = diff(sort(c(0,up)))
#Evaluate integrand
inte = ifelse(wh == 1, foi[1]*a,
sum(foi[1:(wh-1)]*dur[1:(wh-1)])+
foi[wh]*(a-up[wh-1]))
return(inte)
}
llik.pc = function(par, age, num, denom, up) {
ll = 0
for (i in 1:length(age)) {
p = 1 - exp(-integrandpc(a=age[i], up = up,
foi = exp(par)))
ll = ll + dbinom(num[i], denom[i], p, log = T)
}
return(-ll)
}
cate <- c(20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
integrandpc = function(a, up, foi){
#Find which interval a belongs to
wh = findInterval(a, up)
#Calculate duration of each interval
dur = diff(sort(c(0,up)))
#Evaluate integrand
inte = ifelse(wh == 1, foi[1]*a,
sum(foi[1:(wh-1)]*dur[1:(wh-1)])+
foi[wh]*(a-up[wh-1]))
return(inte)
}
llik.pc = function(par, age, num, denom, up) {
ll = 0
for (i in 1:length(age)) {
p = 1 - exp(-integrandpc(a=age[i], up = up,
foi = exp(par)))
ll = ll + dbinom(num[i], denom[i], p, log = T)
}
return(-ll)
}
cate <- c(1,20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
round(exp(est$par), 4)
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[4]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[4]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[3]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
round(exp(est$par), 4)
round(exp(est$par), 5)
integrandpc = function(a, up, foi){
#Find which interval a belongs to
wh = findInterval(a, sort(c(0,up)))
#Calculate duration of each interval
dur = diff(sort(c(0,up)))
#Evaluate integrand
inte = ifelse(wh == 1, foi[1]*a,
sum(foi[1:(wh-1)]*dur[1:(wh-1)])+
foi[wh]*(a-up[wh-1]))
return(inte)
}
llik.pc = function(par, age, num, denom, up) {
ll = 0
for (i in 1:length(age)) {
p = 1 - exp(-integrandpc(a=age[i], up = up,
foi = exp(par)))
ll = ll + dbinom(num[i], denom[i], p, log = T)
}
return(-ll)
}
cate <- c(1,20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
round(exp(est$par), 5)
cate <- c(20,40,60,80)
para = rep(0.1, length(cate))
est = optim(par=log(para),fn=llik.pc, age=df_chik$agemid,
num=df_chik$N.pos,  denom=df_chik$N, up=cate,
method="Nelder-Mead", control=list(trace=2))
round(exp(est$par), 5)
par(mar = c(5,5,2,5))
#Add beginning and ends to x and y for step plot
xvals=c(0,cate)
yvals=exp(c(est$par, est$par[3]))
plot(xvals, yvals, type="s", xlab="age", ylab="FoI")
#Superimpose predicted curve
par(new=T)
p = rep(0, 28)
for (i in 1:28) {
p[i] = 1 - exp(-integrandpc(a=i, up = cate,
foi = exp(est$par)))
}
plot(p~c(1:28), ylim=c(0,1), type="l", col="red",
axes=FALSE, xlab=NA, ylab=NA)
